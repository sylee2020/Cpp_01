>>>16조 3주차 수업 내용 정리[2023-09-18]_가장 기억나는 내용과 느낀 점 나눔
[cout]
-이수영: cout라는 단어를 처음 봤을 때 어떤 의미인지 몰라서 그저 낯설게 느껴졌습니다.
그런데 c와 out의 결합이라는 걸 알고 cout 객체를 확실히 오래 기억할 수 있을 것 같습니다.
덕분에 cin 객체의 의미도 금방 이해할 수 있었습니다.

-원준서: 스크린 출력 장치에 연결된 표준 C++ 출력 스트림 객체이며, <iostream> 헤더 파일에 선언된 객체로, c와 out의 결합입니다. 

[#include <iostream>]
-이수영: c++을 배우면서 iostream 헤더파일을 새롭게 배웠는데 i는 입력, o는 출력을 의미합니다.
이 헤더파일을 선언해야 cout, cin 등을 작성해도 오류가 나지 않는다는 걸 여러번의 실습을 통해 배웠습니다.

-원준서: #include <iostream>은 전처리기에게 내리는 지시로, <iostream> 헤더 파일을 컴파일 전에 소스에 확장하도록 지시합니다.
표준 입출력을 위한 클래스와 객체, 변수 등이 선언됩니다. 
ios, istream, ostream, iostream 클래스가 선언되며, cout, cin << >> 등 연산자를 선언합니다.
이 헤더파일을 선언해야 여러 객체들을 사용해도 오류가 발생하지 않습니다.

[<</>>연산자]
-이수영: cout객체는 << 좌측으로, cin객체는 >> 우측으로 향하는 연산자를 사용하는데, c++에서는 c와 달리 '스트림 삽입 연산자'로 쓰인다는 걸 배웠습니다.
C에서는 비트가 이동하는 것으로 배웠는데 C++에선 다르게 쓰이고 있다는 점이 흥미로웠습니다.
무엇보다 교재의 C++ 코드를 C언어로 바꿔 실습하는 과정에서 C언어로 여러 변수를 출력하는 게 복잡하구나 하는 걸 느꼈습니다.
특히 <<연산자를 한줄에 계속 사용할 수 있는데, 논리형/문자열/실수/정수 등을 한번에 출력하는 코드를 짜는 실습이 가장 기억에 남습니다.
C++로 코드를 작성하면 C언어로 작성할 때보다 간단하고 효율적으로 짤 수 있습니다. 이 문장을 책이나 강의자료에서 보기만 할 땐 그런가보다 했습니다.
그런데 예제 2-2를 C로 짤 때 각각의 데이터타입을 고려하는 과정이 C++로 프로그래밍할 때보다 비교적 복잡하게 느껴졌습니다.

-원준서: << 연산자는 오른쪽 피연산자를 왼쪽 스트림 객체에 삽입하는 방식이며, 여러 개의 << 연산자를 통해 여러 값을 출력할 수도 있습니다.
문자열이나 기본 데이터, 연산식, 함수 호출, 다음 줄로 넘어가기 등, 다양하게 활용할 수 있습니다.
이를 이용해 c++로 코드를 작성하면 c언어로 작성할 때보다 간단하고 효율적으로 짤 수 있다는 걸 새롭게 알게 되었습니다.
>> 연산자는 입력 스트림에서 값을 읽어 변수에 저장합니다. 연속된 >> 연산자를 사용하면, 여러 값을 입력할 수 있습니다.
>>연산자 또한 <<연산자와 같이 c++ 코드를 작성하면 c언어로 작업할 때보다 간단하고 효율적으로 짤 수 있다는 걸 새롭게 알게 되었습니다.

[namespace]
-이수영: C++의 핵심 개념인 namespace를 배울 때 appleput()이 기억에 남습니다.
개발자A가 사용한 appleput(), 개발자B가 사용한 appleput()이 있는 프로젝트를 합치는 과정에서 에러를 줄이기 위해 namespace가 필요합니다.
이 부분은 앞으로 팀프로젝트들을 많이 경험하게 될 텐데 잘 기억해둬야 효율적으로 코드를 작성할 수 있겠다는 생각이 들어 오래 기억에 남습니다.

-원준서: 개발자가 자신만의 이름 공간을 생성할 수 있도록 하여, 이름 공간 안에 선언된 이름은 다른 이름 공간과 별도로 구분합니다.
이름 충돌이 발생하는 경우, 이를 해결하는 것은 오랜 시간이 소요됩니다.
이를 해결하기 위해 namespace를 활용하는데, 여러 명의 프로젝트를 합치는 과정에서 에러를 줄일 수 있다는 점에서 꽤 유용하게 느껴졌습니다. 

[std::]
-이수영: std::도 namespace 중 하나인데 using 지시어를 한 번만 작성하면 이후에 std::를 반복하지 않아도 된다는 점도 기억에 남습니다.
using namespace std; 를 선언하면 됩니다.
같은 결과를 내는 코드라도 어떻게 하면 더 효율적으로 짤 수 있을지 고민하게 되는데 또하나의 좋은 방법을 배우게돼서 오래 기억하고 싶다고 생각했습니다.

-원준서: std는 c++ 표준에서 정의한 namespace 중 하나입니다.
cout, cin, endl 등 <iostream> 헤더 파일에 선언된 모든 이름들은 std 이름 공간 안에 존재합니다.
이 std 이름 공간에 선언된 이름을 접근하기 위해 std:: 를 사용합니다. 이를 간소화하기 위해 using 지시어를 작성하면 이후에 std::를 생략할 수 있습니다.

[문자열 표현방식 2가지(문자 배열vs문자열 구분 "중요")]
-이수영: 뒤에 '₩0'이 없으면 단순히 여러 문자가 있는 배열, '₩0'이 있으면 문자열이 된다는 점을 배웠습니다.
그동안 여러번 반복하지 않아서 헷갈릴 때가 많던 부분이었기 때문에, 이번 수업때 한번더 보게 돼서 확실히 오래 기억나고 잘 분류할 수 있을 것 같습니다.

-원준서: [문자열 표현 방식]
문자열 표현 방식은 두 가지로, C-스트링 방식과 단순 문자 배열이 존재합니다.
둘의 차이점은 '\0'로, '\0'로 끝나는 문자 배열이면 C-스트링 문자 배열, '\0'이 존재하지 않는다면 단순 문자 배열입니다.
뒤에 '\0'을 붙이는 것의 차이로, 문자열의 표현 방식이 완전히 바뀔 수 있다는 것을 새롭게 알게 되었습니다.

[cin]
-원준서: 표준 입력 장치인 키보드를 연결하는 C++ 입력 스트림 객체이며, <iostream> 헤더 파일에 선언된 객체로, c와 in의 결합입니다.
특징으로는 입력 버퍼를 내장하고 있으며, Enter키가 입력될 때까지 입력된 키를 입력 버퍼에 저장합니다.
또한, 도중에 Backspace키를 입력하면 입력된 키가 삭제됩니다.

-이수영: cin은 c++에서 사용되는 input값 즉 입력값을 저장합니다.
1,2차시 때 본격적으로 C++ 문법을 배우면서 C와 C++의 차이를 가장 크게 느낀 부분입니다.
printf()와 scanf()가 cout, cin 객체를 이용해서 나타난다는 점을 교수님 강의를 들으면서, 예제 실습을 반복하는 과정에서 체화할 수 있었습니다.

[공백이 낀 문자열 입력]
-원준서: 공백이 낀 문자열을 입력 받는 방법은, cin.getline()을 이용해 공백이 낀 부분을 입력받을 수 있습니다.

-이수영: .getline()을 작성하지 않으면 공백이 발생할 때 원치 않는 실행 결과가 나타날 수 있다는 점을 새롭게 배웠습니다.
연습문제 8번에서도 이것을 활용한 실습을 하면서 cin.getline()이 공백 외에 세미콜론을 기준으로도 입력값을 계속 받을 수 있다는 점이 흥미로웠습니다.
앞으로 cin 객체를 이용할 때 .getline()을 함께 사용해서 사용자의 입력값 일부가 제외되지 않도록 프로그래밍하는 것의 중요성을 알게 되었습니다.